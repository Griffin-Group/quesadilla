import os

import numpy as np
import pytest

from quesadilla.supercells import SupercellGenerator
from quesadilla.utils import get_phonopy_prim, read_lwm

TEST_DIR = os.path.dirname(os.path.abspath(__file__))


@pytest.mark.parametrize(("material", "grid"), [("Si", [4, 4, 4]), ("CsCl", [4, 4, 4])])
def test_supercells(material, grid):
    root = os.path.join(TEST_DIR, "data", material)
    primitive, _ = get_phonopy_prim(os.path.join(root, "POSCAR"))
    sc_gen = SupercellGenerator(primitive, grid)
    sc_gen.generate_supercells(minkowski_reduce=True, minimize_supercells=False)

    # Read the stuff generated by Lloyd-Williams and Monserrat's code
    sc_matrices, q_comm = read_lwm(os.path.join(root, "lwm"))
    # Need to sort to have the same order as Quesadilla
    sort_idx = np.lexsort(q_comm.T)
    sc_matrices = sc_matrices[sort_idx]
    q_comm = q_comm[sort_idx]

    for i, (T1, T2) in enumerate(zip(sc_matrices, sc_gen.sc_matrices)):
        assert q_comm[i][0] in sc_gen.q_comm[i]
        assert np.allclose(T1, T2)
